// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Uptime.www.webservicex.net {
    
}


[System.ServiceModel.ServiceContractAttribute(Namespace="Uptime.www.webservicex.net", ConfigurationName="ConvertTemperatureSoap")]
public interface ConvertTemperatureSoap {
    
    [System.ServiceModel.OperationContractAttribute(Action="*", ReplyAction="http://www.webserviceX.NET/ConvertTemp")]
    double ConvertTemp(double Temperature, www.webservicex.net.FromUnit FromUnit, www.webservicex.net.FromUnit ToUnit);
    
    [System.ServiceModel.OperationContractAttribute(Action="*", ReplyAction="http://www.webserviceX.NET/ConvertTemp", AsyncPattern=true)]
    System.IAsyncResult BeginConvertTemp(double Temperature, www.webservicex.net.FromUnit FromUnit, www.webservicex.net.FromUnit ToUnit, System.AsyncCallback asyncCallback, object userState);
    
    double EndConvertTemp(System.IAsyncResult result);
}

public interface ConvertTemperatureSoapChannel : ConvertTemperatureSoap, System.ServiceModel.IClientChannel {
}

public class ConvertTemperatureSoapClient : System.ServiceModel.ClientBase<ConvertTemperatureSoap>, ConvertTemperatureSoap {
    
    private BeginOperationDelegate onBeginConvertTempDelegate;
    
    private EndOperationDelegate onEndConvertTempDelegate;
    
    private System.Threading.SendOrPostCallback onConvertTempCompletedDelegate;
    
    public ConvertTemperatureSoapClient() {
    }
    
    public ConvertTemperatureSoapClient(string endpointConfigurationName) : 
            base(endpointConfigurationName) {
    }
    
    public ConvertTemperatureSoapClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public ConvertTemperatureSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public ConvertTemperatureSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpoint) : 
            base(binding, endpoint) {
    }
    
    public event System.EventHandler<ConvertTempCompletedEventArgs> ConvertTempCompleted;
    
    public double ConvertTemp(double Temperature, www.webservicex.net.FromUnit FromUnit, www.webservicex.net.FromUnit ToUnit) {
        return base.Channel.ConvertTemp(Temperature, FromUnit, ToUnit);
    }
    
    public System.IAsyncResult BeginConvertTemp(double Temperature, www.webservicex.net.FromUnit FromUnit, www.webservicex.net.FromUnit ToUnit, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginConvertTemp(Temperature, FromUnit, ToUnit, asyncCallback, userState);
    }
    
    public double EndConvertTemp(System.IAsyncResult result) {
        return base.Channel.EndConvertTemp(result);
    }
    
    private System.IAsyncResult OnBeginConvertTemp(object[] args, System.AsyncCallback asyncCallback, object userState) {
        double Temperature = ((double)(args[0]));
        www.webservicex.net.FromUnit FromUnit = ((www.webservicex.net.FromUnit)(args[1]));
        www.webservicex.net.FromUnit ToUnit = ((www.webservicex.net.FromUnit)(args[2]));
        return this.BeginConvertTemp(Temperature, FromUnit, ToUnit, asyncCallback, userState);
    }
    
    private object[] OnEndConvertTemp(System.IAsyncResult result) {
        object __ret = this.EndConvertTemp(result);
        return new object[] {
                __ret};
    }
    
    private void OnConvertTempCompleted(object state) {
        if ((this.ConvertTempCompleted != null)) {
            InvokeAsyncCompletedEventArgs args = ((InvokeAsyncCompletedEventArgs)(state));
            this.ConvertTempCompleted(this, new ConvertTempCompletedEventArgs(args.Results, args.Error, args.Cancelled, args.UserState));
        }
    }
    
    public void ConvertTempAsync(double Temperature, www.webservicex.net.FromUnit FromUnit, www.webservicex.net.FromUnit ToUnit) {
        this.ConvertTempAsync(Temperature, FromUnit, ToUnit, null);
    }
    
    public void ConvertTempAsync(double Temperature, www.webservicex.net.FromUnit FromUnit, www.webservicex.net.FromUnit ToUnit, object userState) {
        if ((this.onBeginConvertTempDelegate == null)) {
            this.onBeginConvertTempDelegate = new BeginOperationDelegate(this.OnBeginConvertTemp);
        }
        if ((this.onEndConvertTempDelegate == null)) {
            this.onEndConvertTempDelegate = new EndOperationDelegate(this.OnEndConvertTemp);
        }
        if ((this.onConvertTempCompletedDelegate == null)) {
            this.onConvertTempCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConvertTempCompleted);
        }
        base.InvokeAsync(this.onBeginConvertTempDelegate, new object[] {
                    Temperature,
                    FromUnit,
                    ToUnit,
                    userState}, this.onEndConvertTempDelegate, this.onConvertTempCompletedDelegate, userState);
    }
}

public class ConvertTempCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
    
    private object[] results;
    
    public ConvertTempCompletedEventArgs(object[] results, System.Exception error, bool cancelled, object userState) : 
            base(error, cancelled, userState) {
        this.results = results;
    }
    
    public double Result {
        get {
            return ((double)(this.results[0]));
        }
    }
}
namespace www.webservicex.net {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TemperatureUnit", Namespace="http://www.webserviceX.NET/")]
    public enum FromUnit {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        degreeCelsius,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        degreeFahrenheit,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        degreeRankine,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        degreeReaumur,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        kelvin,
    }
}
